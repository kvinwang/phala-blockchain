---
source: crates/pink/sidevm/macro/src/ocall.rs
assertion_line: 458
expression: "rustfmt_snippet::rustfmt_token_stream(&stream).unwrap()"
---
pub trait Ocall {
    fn call_slow(&self, a: i32, b: i32) -> i32;
    fn call_fi(&self, a: i32, b: i32) -> i32;
    fn call_fo(&self, a: i32, b: i32) -> i32;
    fn poll_fi_fo(&self, a: i32, b: i32) -> i32;
}
pub struct OcallImplement;
impl OcallImplement {
    pub fn call_slow(&self, a: i32, b: i32) -> i32 {
        unsafe {
            let inputs = (a, b);
            let mut input_buf = empty_buffer();
            Encode::encode_to(&inputs, &mut input_buf);
            let len = input_buf.len() as IntPtr;
            let ret = sidevm_ocall(current_task(), 101, input_buf.as_ptr() as IntPtr, len, 0, 0);
            let len = ret;
            if len < 0 {
                panic!("ocall returned an error");
            }
            let mut buf = alloc_buffer(len as _);
            let ret =
                sidevm_ocall_fast_return(current_task(), 0, buf.as_mut_ptr() as IntPtr, len, 0, 0);
            if ret != len {
                panic!("ocall get return length mismatch");
            }
            Decode::decode(&mut buf.as_ref()).expect("Failed to decode ocall return value")
        }
    }
    pub fn call_fi(&self, a: i32, b: i32) -> i32 {
        unsafe {
            let ret = sidevm_ocall(current_task(), 103, a as _, b as _, 0, 0);
            let len = ret;
            if len < 0 {
                panic!("ocall returned an error");
            }
            let mut buf = alloc_buffer(len as _);
            let ret =
                sidevm_ocall_fast_return(current_task(), 0, buf.as_mut_ptr() as IntPtr, len, 0, 0);
            if ret != len {
                panic!("ocall get return length mismatch");
            }
            Decode::decode(&mut buf.as_ref()).expect("Failed to decode ocall return value")
        }
    }
    pub fn call_fo(&self, a: i32, b: i32) -> i32 {
        unsafe {
            let inputs = (a, b);
            let mut input_buf = empty_buffer();
            Encode::encode_to(&inputs, &mut input_buf);
            let len = input_buf.len() as IntPtr;
            let ret = sidevm_ocall_fast_return(
                current_task(),
                104,
                input_buf.as_ptr() as IntPtr,
                len,
                0,
                0,
            );
            ret as _
        }
    }
    pub fn poll_fi_fo(&self, a: i32, b: i32) -> i32 {
        unsafe {
            let ret = sidevm_ocall_fast_return(current_task(), 102, a as _, b as _, 0, 0);
            ret as _
        }
    }
}
pub fn dispatch_call_fast_return<Env: Ocall + OcallEnv>(
    env: &mut Env,
    id: i32,
    p0: IntPtr,
    p1: IntPtr,
    p2: IntPtr,
    p3: IntPtr,
) -> Result<IntPtr> {
    Ok(match id {
        0 => {
            let buffer = env.take_return().ok_or(OcallError::NoReturnValue)?;
            let len = p1 as usize;
            if buffer.len() != len {
                return Err(OcallError::InvalidParameter);
            }
            env.copy_to_vm(&buffer, p0)?;
            len as IntPtr
        }
        104 => {
            let (a, b) = {
                let mut buf = env.slice_from_vm(p0, p1)?;
                Decode::decode(&mut buf).or(Err(OcallError::InvalidParameter))?
            };
            env.call_fo(a, b) as _
        }
        102 => {
            let (a, b) = (p0 as _, p1 as _);
            env.poll_fi_fo(a, b) as _
        }
        _ => return Err(OcallError::UnknownCallNumber),
    })
}
pub fn dispatch_call<Env: Ocall + OcallEnv>(
    env: &mut Env,
    id: i32,
    p0: IntPtr,
    p1: IntPtr,
    p2: IntPtr,
    p3: IntPtr,
) -> Result<IntPtr> {
    Ok(match id {
        0 => {
            let ret: IntPtr = {
                let buffer = env.take_return().ok_or(OcallError::NoReturnValue)?;
                let len = p1 as usize;
                if buffer.len() != len {
                    return Err(OcallError::InvalidParameter);
                }
                env.copy_to_vm(&buffer, p0)?;
                len as IntPtr
            };
            env.put_return(ret.encode()) as _
        }
        101 => {
            let (a, b) = {
                let mut buf = env.slice_from_vm(p0, p1)?;
                Decode::decode(&mut buf).or(Err(OcallError::InvalidParameter))?
            };
            let ret = env.call_slow(a, b);
            env.put_return(ret.encode()) as _
        }
        103 => {
            let (a, b) = (p0 as _, p1 as _);
            let ret = env.call_fi(a, b);
            env.put_return(ret.encode()) as _
        }
        104 => {
            let (a, b) = {
                let mut buf = env.slice_from_vm(p0, p1)?;
                Decode::decode(&mut buf).or(Err(OcallError::InvalidParameter))?
            };
            let ret = env.call_fo(a, b);
            env.put_return(ret.encode()) as _
        }
        102 => {
            let (a, b) = (p0 as _, p1 as _);
            let ret = env.poll_fi_fo(a, b);
            env.put_return(ret.encode()) as _
        }
        _ => return Err(OcallError::UnknownCallNumber),
    })
}
pub trait OcallEnv {
    fn put_return(&self, rv: Vec<u8>) -> usize;
    fn take_return(&self) -> Option<Vec<u8>>;
    fn copy_to_vm(&self, data: &[u8], ptr: IntPtr) -> Result<()>;
    fn slice_from_vm(&self, ptr: IntPtr, len: IntPtr) -> Result<&[u8]>;
    fn slice_from_vm_mut(&self, ptr: IntPtr, len: IntPtr) -> Result<&mut [u8]>;
}
pub fn ocall_id2name(id: i32) -> &'static str {
    match id {
        0 => "get_return",
        101i32 => "call_slow",
        103i32 => "call_fi",
        104i32 => "call_fo",
        102i32 => "poll_fi_fo",
        _ => "unknown",
    }
}

